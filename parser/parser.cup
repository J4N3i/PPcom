package parser;

import java_cup.runtime.*;
import ast.*;
import java.util.*;

/* Parser code */
parser code {:
    // ANSI Colors
    private static final String RED = "\u001B[31m";
    private static final String GREEN = "\u001B[32m";
    private static final String YELLOW = "\u001B[33m";
    private static final String BLUE = "\u001B[34m";
    private static final String MAGENTA = "\u001B[35m";
    private static final String CYAN = "\u001B[36m";
    private static final String RESET = "\u001B[0m";
    private static final String BOLD = "\u001B[1m";
    private static final String DIM = "\u001B[2m";
    private static final String ITALIC = "\u001B[3m";

    public void syntax_error(Symbol cur_token) {
        StringBuilder error = new StringBuilder();
        String tokenValue = cur_token.value != null ? cur_token.value.toString() : "unknown";
        
        // Error header with location
        error.append("\n").append(RED).append(BOLD).append("‚ï≠‚îÄ‚îÄ TestLang++ Syntax Error ").append(RESET)
             .append(DIM).append("at line ").append(cur_token.left).append(", column ").append(cur_token.right).append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        
        // Main error message with context
        if (cur_token.sym == sym.EXPECT) {
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(BOLD).append("‚ö†Ô∏è  Missing Statement Terminator").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(YELLOW).append(" PROBLEM").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  A semicolon (;) is required after each HTTP request statement").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  This helps maintain clear statement boundaries in your test code").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(BLUE).append(" SOLUTION").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Add a semicolon after:").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ GET/POST/PUT/DELETE requests").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Variable declarations").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Configuration settings").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(CYAN).append(" EXAMPLES").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("GET \"/api/users\" expect status = 200").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("GET \"/api/users\"; expect status = 200;").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("POST \"/api/users\"; expect status = 201;").append(RESET).append("\n");
        } else if (cur_token.sym == sym.NUMBER || tokenValue.matches("^[0-9].*")) {
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(BOLD).append("‚ö†Ô∏è  Invalid Variable Name").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(YELLOW).append(" PROBLEM").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Invalid variable name found: ").append(ITALIC).append(tokenValue).append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Variable names have specific formatting rules in TestLang++").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(MAGENTA).append(" NAMING RULES").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Variable names must:").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Begin with a letter (a-z, A-Z) or underscore (_)").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Can contain letters, numbers, and underscores afterward").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Are case-sensitive (userId ‚â† UserId)").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Cannot be reserved keywords (test, let, expect, etc.)").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(CYAN).append(" EXAMPLES").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("let 1user = \"admin\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("let user-name = \"john\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("let user1 = \"admin\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("let _user = \"admin\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("let userName = \"john\";").append(RESET).append("\n");
        } else {
            error.append(RED).append("‚îÇ").append(RESET).append("  ").append(BOLD).append("‚ö†Ô∏è  Unexpected Syntax").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(YELLOW).append(" PROBLEM").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Found unexpected token: ").append(ITALIC).append(tokenValue).append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  This token doesn't match the expected syntax at this position").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(BLUE).append(" COMMON CAUSES").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  Check for:").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Misspelled keywords (GET, POST, expect, etc.)").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Missing quotes around string values").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Missing or extra punctuation (;, {, })").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Incorrect statement order").append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("\n");
            error.append(RED).append("‚îú‚îÄ").append(RESET).append(CYAN).append(" VALID SYNTAX PATTERNS").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ HTTP Methods:   ").append(GREEN).append("GET \"/path\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Variables:      ").append(GREEN).append("let name = \"value\";").append(RESET).append("\n");
            error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Assertions:     ").append(GREEN).append("expect status = 200;").append(RESET).append("\n");
        }
        
        // Help footer with more context
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚ï∞‚îÄ").append(RESET).append(" üí° ").append(ITALIC)
             .append("Need help? Refer to TestLang++ documentation for complete syntax guide and examples.")
             .append(RESET).append("\n");
        
        report_error(error.toString(), null);
        
        if (cur_token.sym == sym.EXPECT) {
            System.exit(1);
        }
    }

    public void report_error(String message, Object info) {
        System.err.println(message);
    }
    
:};

/* Terminals (tokens) */
terminal CONFIG, BASE_URL, HEADER, LET, TEST;
terminal GET, POST, PUT, DELETE;
terminal EXPECT, STATUS, BODY, CONTAINS, IN;
terminal EQUALS, SEMICOLON, LBRACE, RBRACE, DOTDOT;
terminal String IDENTIFIER, STRING, MULTILINE_STRING;
terminal Integer NUMBER;

/* Non-terminals */
non terminal ProgramNode program;
non terminal ConfigNode config_opt, config_block;
non terminal List config_items;
non terminal List variables;
non terminal VariableNode variable;
non terminal Object value;
non terminal List tests;
non terminal TestNode test_block;
non terminal List test_statements;
non terminal Object test_statement;
non terminal RequestNode request;
non terminal List request_block_opt, request_items;
non terminal Object request_item;
non terminal HeaderNode header_decl;
non terminal AssertionNode assertion;

/* Precedence (not needed for this grammar) */

/* Grammar Rules */
start with program;

/* Program: config? variables* tests+ */
program ::= 
    config_opt:c variables:v tests:t
    {: 
        ProgramNode prog = new ProgramNode();
        if (c != null) {
            prog.setConfig(c);
        }
        for (Object var : v) {
            prog.addVariable((VariableNode) var);
        }
        for (Object test : t) {
            prog.addTest((TestNode) test);
        }
        RESULT = prog;
    :}
    ;

/* Config block (optional) */
config_opt ::= 
    config_block:c          {: RESULT = c; :}
    | /* empty */           {: RESULT = null; :}
    ;

config_block ::= 
    CONFIG LBRACE config_items:items RBRACE
    {:
        ConfigNode config = new ConfigNode();
        for (Object item : items) {
            if (item instanceof String) {
                config.setBaseUrl((String) item);
            } else if (item instanceof HeaderNode) {
                config.addHeader((HeaderNode) item);
            }
        }
        RESULT = config;
    :}
    ;

config_items ::=
    config_items:list BASE_URL EQUALS STRING:url SEMICOLON
    {:
        list.add(url);
        RESULT = list;
    :}
    | config_items:list header_decl:h
    {:
        list.add(h);
        RESULT = list;
    :}
    | /* empty */
    {:
        RESULT = new ArrayList();
    :}
    ;

header_decl ::=
    HEADER STRING:key EQUALS STRING:val SEMICOLON
    {:
        RESULT = new HeaderNode(key, val);
    :}
    ;

/* Variables: let name = value; */
variables ::=
    variables:list variable:v
    {:
        list.add(v);
        RESULT = list;
    :}
    | /* empty */
    {:
        RESULT = new ArrayList();
    :}
    ;

variable ::=
    LET IDENTIFIER:name EQUALS value:val SEMICOLON
    {:
        RESULT = new VariableNode(name, val);
    :}
    ;

value ::=
    STRING:s        {: RESULT = s; :}
    | NUMBER:n      {: RESULT = n; :}
    ;

/* Tests: test Name { ... } */
tests ::=
    tests:list test_block:t
    {:
        list.add(t);
        RESULT = list;
    :}
    | test_block:t
    {:
        List list = new ArrayList();
        list.add(t);
        RESULT = list;
    :}
    ;

test_block ::=
    TEST IDENTIFIER:name LBRACE test_statements:stmts RBRACE
    {:
        TestNode test = new TestNode(name);
        for (Object stmt : stmts) {
            if (stmt instanceof RequestNode) {
                test.addRequest((RequestNode) stmt);
            } else if (stmt instanceof AssertionNode) {
                test.addAssertion((AssertionNode) stmt);
            }
        }
        RESULT = test;
    :}
    ;

test_statements ::=
    test_statements:list test_statement:stmt
    {:
        list.add(stmt);
        RESULT = list;
    :}
    | test_statement:stmt
    {:
        List list = new ArrayList();
        list.add(stmt);
        RESULT = list;
    :}
    ;

test_statement ::=
    request:r           {: RESULT = r; :}
    | assertion:a       {: RESULT = a; :}
    ;

/* HTTP Requests */
request ::=
    GET STRING:path SEMICOLON
    {:
        RESULT = new RequestNode(RequestNode.HttpMethod.GET, path);
    :}
    | DELETE STRING:path SEMICOLON
    {:
        RESULT = new RequestNode(RequestNode.HttpMethod.DELETE, path);
    :}
    | POST STRING:path request_block_opt:items
    {:
        RequestNode req = new RequestNode(RequestNode.HttpMethod.POST, path);
        for (Object item : items) {
            if (item instanceof HeaderNode) {
                req.addHeader((HeaderNode) item);
            } else if (item instanceof String) {
                req.setBody((String) item);
            }
        }
        RESULT = req;
    :}
    | PUT STRING:path request_block_opt:items
    {:
        RequestNode req = new RequestNode(RequestNode.HttpMethod.PUT, path);
        for (Object item : items) {
            if (item instanceof HeaderNode) {
                req.addHeader((HeaderNode) item);
            } else if (item instanceof String) {
                req.setBody((String) item);
            }
        }
        RESULT = req;
    :}
    ;

request_block_opt ::=
    LBRACE request_items:items RBRACE      {: RESULT = items; :}
    | /* empty */                          {: RESULT = new ArrayList(); :}
    ;

request_items ::=
    request_items:list request_item:item
    {:
        list.add(item);
        RESULT = list;
    :}
    | /* empty */
    {:
        RESULT = new ArrayList();
    :}
    ;

request_item ::=
    header_decl:h       {: RESULT = h; :}
    | BODY EQUALS STRING:s SEMICOLON    {: RESULT = s; :}
    | BODY EQUALS MULTILINE_STRING:s SEMICOLON    {: RESULT = s; :}
    | BODY EQUALS NUMBER:n SEMICOLON    
    {: 
        StringBuilder error = new StringBuilder();
        error.append("\n").append(RED).append(BOLD).append("‚ï≠‚îÄ Type Error ").append(RESET)
             .append(DIM).append("at line ").append(nleft).append(", column ").append(nright).append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(BOLD).append("Invalid request body type").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îú‚îÄ").append(RESET).append(YELLOW).append(" DETAILS").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  Request bodies must be strings:").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ Use quotes for JSON data").append("\n");
        error.append("‚îÇ  ‚Ä¢ Escape quotes in JSON with \\\"").append("\n");
        error.append("‚îÇ  ‚Ä¢ Use \"\"\" for multiline JSON").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îú‚îÄ").append(RESET).append(CYAN).append(" EXAMPLES").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("body = 123;").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("body = \"{\\\"value\\\": 123}\";").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("body = \"\"\"{\n").append(RESET)
             .append(GREEN).append("    \"value\": 123\n").append(RESET)
             .append(GREEN).append("  }\"\"\";").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚ï∞‚îÄ").append(RESET).append(" TIP: Use multiline strings (\"\"\"...\"\"\") for better JSON readability.\n");
        System.err.println(error.toString());
        System.exit(1);
        RESULT = null;
    :}
    ;

/* Assertions */
assertion ::=
    EXPECT STATUS EQUALS NUMBER:code SEMICOLON
    {:
        RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS, code);
    :}
    | EXPECT STATUS IN NUMBER:min DOTDOT NUMBER:max SEMICOLON
    {:
        RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS_RANGE, min, max);
    :}
    | EXPECT STATUS EQUALS STRING:s SEMICOLON
    {:
        StringBuilder error = new StringBuilder();
        error.append("\n").append(RED).append(BOLD).append("‚ï≠‚îÄ Type Error ").append(RESET)
             .append(DIM).append("at line ").append(sleft).append(", column ").append(sright).append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(BOLD).append("Invalid status code type").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îú‚îÄ").append(RESET).append(YELLOW).append(" DETAILS").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  HTTP status codes must be numbers:").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ 2xx Success Codes:").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("    200 (OK), 201 (Created), 204 (No Content)").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ 4xx Client Error Codes:").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("    400 (Bad Request), 401 (Unauthorized), 404 (Not Found)").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ‚Ä¢ 5xx Server Error Codes:").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("    500 (Internal Error), 503 (Service Unavailable)").append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚îú‚îÄ").append(RESET).append(CYAN).append(" EXAMPLES").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("expect status = \"200\";").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úó Invalid: ").append(RESET).append(RED).append("expect status = \"OK\";").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("expect status = 200;").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("  ").append(DIM).append("‚úì Valid:   ").append(RESET).append(GREEN).append("expect status in 200..299;").append(RESET).append("\n");
        error.append(RED).append("‚îÇ").append(RESET).append("\n");
        error.append(RED).append("‚ï∞‚îÄ").append(RESET).append(" TIP: You can use 'status in min..max' to match a range of status codes.\n");
        System.err.println(error.toString());
        System.exit(1);
        RESULT = null;
    :}
    | EXPECT HEADER STRING:key EQUALS STRING:val SEMICOLON
    {:
        RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_EQUALS, key, val);
    :}
    | EXPECT HEADER STRING:key CONTAINS STRING:val SEMICOLON
    {:
        RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_CONTAINS, key, val);
    :}
    | EXPECT BODY CONTAINS STRING:val SEMICOLON
    {:
        RESULT = new AssertionNode(AssertionNode.AssertionType.BODY_CONTAINS, val);
    :}
    ;